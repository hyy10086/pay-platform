<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security-4.1.xsd ">

    <!-- 实现静态资源访问, 避免被spring security所过滤 -->
    <security:http pattern="/resources/**" security="none" create-session="never"/>

    <!-- 过滤器配置,spring编码过滤器 -->
    <bean id="springUtf8Encoding" class="org.springframework.web.filter.CharacterEncodingFilter">
        <property name="encoding" value="utf-8"/>
        <property name="forceEncoding" value="true"/>
    </bean>

    <!-- 拦截系统内部的请求,进行权限控制 -->
    <security:http auto-config="true">

        <!-- 禁用HeaderWriterFilter为response添加安全header信息 , 避免iframe , ajaxFileUpload上传无效 -->
        <security:headers defaults-disabled="true">
            <security:cache-control />
        </security:headers>

        <!-- 任何人都可访问登录,注销操作 , requires-channel="http"  -->
        <security:intercept-url pattern="/j_spring_security_check" access="permitAll()"  />
        <security:intercept-url pattern="/j_spring_security_logout" access="permitAll()" />
        <security:intercept-url pattern="/console/login" access="permitAll()" />

        <!-- 自定义登录界面
         login-page: 指定登录界面            login-processing-url: 处理登录请求的url,需与表单提交保持一致
         default-target-url: 登录成功跳转    authentication-failure-url: 登录错误,返回当前界面,并带上一个标识
         username-parameter,password-parameter: 指定登录表单的name -->
        <security:form-login login-page="/console/login" login-processing-url="/j_spring_security_check"
                             default-target-url="/console/index" authentication-failure-url="/console/login?isLoginError=true"
                             username-parameter="username" password-parameter="password"/>

        <!-- 自定义注销页面 -->
        <security:logout logout-url="/console/logout" delete-cookies="JSESSIONID"/>

        <!-- 允许非匿名用户访问(必须先登录) -->
        <security:intercept-url pattern="/console/**" access="isAuthenticated()" />
        <security:intercept-url pattern="/**/*.jsp" access="isAuthenticated()"  />

        <!-- 程序中的一些通用操作,通常是为其它模块提供服务,例如字典/组织机构树等,只需要登录即可访问,无需进行权限过滤
          使用方式一(推荐): 在类上或方法上标识@CommonRequest
          使用方式二: 在requestMapping上追加common访问前缀  -->
        <security:intercept-url pattern="/**/common/**" access="isAuthenticated()" />
        <security:intercept-url pattern="/common/**" access="isAuthenticated()" />

        <!-- 必须放到最后: 拦截除了之前配置的静态资源,登录,注销,控制台之外的所有请求, 并进行权限控制 -->
        <security:intercept-url pattern="/**"/>

        <!-- 自定义过滤器配置,需在spring的filter_security_interceptor之前执行-->
        <security:custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>

    </security:http>

    <!-- 配置自定义过滤器(需注入三个组件) -->
    <bean id="securityFilter" class="com.pay.platform.security.SpringsecurityFilter">

        <!-- 数据源: 获取系统内定义的所有角色、权限 -->
        <property name="securityMetadataSource" ref="securityMetadataSource"/>

        <!-- 授权管理: 获取用户所拥有的角色、权限 -->
        <property name="authenticationManager" ref="securityAuthenticationManager"/>

        <!-- 认证器: 用户是否拥有所请求资源的权限 -->
        <property name="accessDecisionManager" ref="securityAccessDecisionManager"/>

    </bean>

    <!-- 数据源信息 -->
    <bean id="securityMetadataSource" class="com.pay.platform.security.SpringsecurityMetadataSource"/>

    <!-- 配置自定义认证管理器 -->
    <bean id="securityAccessDecisionManager" class="com.pay.platform.security.SpringAccessDecisionManager"/>

    <!-- 配置认证管理器 ,指定加密方式-->
    <bean id="md5PasswordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
    <security:authentication-manager alias="securityAuthenticationManager">
        <security:authentication-provider user-service-ref="userServiceDetail">
            <security:password-encoder ref="md5PasswordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 用户相关服务,用于获取相关信息(登录/权限/角色....)  -->
    <bean id="userServiceDetail" class="com.pay.platform.security.UserDetailsServiceImpl"/>

</beans>